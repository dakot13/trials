#include <stdio.h>
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
#include "driver/spi_master.h"
#include "esp_log.h"

// Define the SPI pins for HSPI
#define HSPI_PIN_SCK 14 // Clock pin for HSPI
#define HSPI_PIN_MISO 12 // Master In Slave Out pin for HSPI
#define HSPI_PIN_MOSI 13 // Master Out Slave In pin for HSPI
#define HSPI_PIN_CS 15 // Chip Select pin for HSPI

// Define the SPI pins for VSPI
#define VSPI_PIN_SCK 18 // Clock pin for VSPI
#define VSPI_PIN_MISO 19 // Master In Slave Out pin for VSPI
#define VSPI_PIN_MOSI 23 // Master Out Slave In pin for VSPI
#define VSPI_PIN_CS 5 // Chip Select pin for VSPI

// MCP3208 command bits
#define MCP3208_START_BIT 0x06
#define MCP3208_SINGLE_ENDED 0x00

static spi_device_handle_t hspi;
static spi_device_handle_t vspi;

// Function to initialize SPI bus
void init_spi_bus() {
    spi_bus_config_t hbus_config = {
        .mosi_io_num = HSPI_PIN_MOSI,
        .miso_io_num = HSPI_PIN_MISO,
        .sclk_io_num = HSPI_PIN_SCK,
        .quadwp_io_num = -1,
        .quadhd_io_num = -1,
        .max_transfer_sz = 0
    };

    spi_bus_config_t vbus_config = {
        .mosi_io_num = VSPI_PIN_MOSI,
        .miso_io_num = VSPI_PIN_MISO,
        .sclk_io_num = VSPI_PIN_SCK,
        .quadwp_io_num = -1,
        .quadhd_io_num = -1,
        .max_transfer_sz = 0
    };

    spi_bus_initialize(HSPI_HOST, &hbus_config, 1);
    spi_bus_initialize(VSPI_HOST, &vbus_config, 1);
}

// Function to initialize MCP3208 SPI device for HSPI
void init_hspi_mcp3208() {
    spi_device_interface_config_t dev_config = {
        .command_bits = 8,
        .address_bits = 0,
        .mode = 0,
        .clock_speed_hz = 1000000,           // 1 MHz clock
        .spics_io_num = HSPI_PIN_CS,
        .queue_size = 1,
        .flags = 0,
        .duty_cycle_pos = 0,
        .cs_ena_pretrans = 0,
        .cs_ena_posttrans = 0,
        .input_delay_ns = 0,
        .pre_cb = NULL,
        .post_cb = NULL
    };

    spi_bus_add_device(HSPI_HOST, &dev_config, &hspi);
}

// Function to initialize MCP3208 SPI device for VSPI
void init_vspi_mcp3208() {
    spi_device_interface_config_t dev_config = {
        .command_bits = 8,
        .address_bits = 0,
        .mode = 0,
        .clock_speed_hz = 1000000,           // 1 MHz clock
        .spics_io_num = VSPI_PIN_CS,
        .queue_size = 1,
        .flags = 0,
        .duty_cycle_pos = 0,
        .cs_ena_pretrans = 0,
        .cs_ena_posttrans = 0,
        .input_delay_ns = 0,
        .pre_cb = NULL,
        .post_cb = NULL
    };

    spi_bus_add_device(VSPI_HOST, &dev_config, &vspi);
}

// Function to read ADC value from MCP3208 connected to HSPI
int read_hspi_adc(uint8_t channel) {
    uint8_t command[3];
    command[0] = MCP3208_START_BIT | (MCP3208_SINGLE_ENDED << 6) | (channel << 4);
    command[1] = 0;
    command[2] = 0;

    spi_transaction_t t;
    memset(&t, 0, sizeof(t));
    t.length = 24; // 3 bytes
    t.tx_buffer = command;
    t.rx_buffer = command;

    spi_device_transmit(hspi, &t);

    // Combine the bytes to get the ADC value
    int adc_value = ((command[0] & 0x01) << 11) | (command[1] << 3) | (command[2] >> 5);
  
    return adc_value;
}

// Function to read ADC value from MCP3208 connected to VSPI
int read_vspi_adc(uint8_t channel) {
    uint8_t command[3];
    command[0] = MCP3208_START_BIT | (MCP3208_SINGLE_ENDED << 6) | (channel << 4);
    command[1] = 0;
    command[2] = 0;

    spi_transaction_t t;
    memset(&t, 0, sizeof(t));
    t.length = 24; // 3 bytes
    t.tx_buffer = command;
    t.rx_buffer = command;

    spi_device_transmit(vspi, &t);

    // Combine the bytes to get the ADC value
    int adc_value = ((command[0] & 0x01) << 11) | (command[1] << 3) | (command[2] >> 5);
  
    return adc_value;
}

void app_main() {
    init_spi_bus();
    init_hspi_mcp3208();
    init_vspi_mcp3208();

    while (1) {
        // Read all 8 channels from HSPI and print their values
        for (int channel = 0; channel < 8; channel++) {
            int adc_value = read_hspi_adc(channel);
            printf("HSPI Channel %d: %d\n", channel, adc_value);
        }

        // Read all 8 channels from VSPI and print their values
        for (int channel = 0; channel < 8; channel++) {
            int adc_value = read_vspi_adc(channel);
            printf("VSPI Channel %d: %d\n", channel, adc_value);
        }

        vTaskDelay(1000 / portTICK_PERIOD_MS); // Delay between readings
    }
}
